import json
import os
import time

DATA_FILE = "pymusic_data.json"

# Cargar datos desde archivo JSON o iniciar estructura vac√≠a
def cargar_datos():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {"catalogo": [], "playlists": {}, "usuarios": {}}

# Guardar datos en archivo JSON
def guardar_datos(datos):
    with open(DATA_FILE, "w") as f:
        json.dump(datos, f, indent=4)

#  Agregar una canci√≥n al cat√°logo
def agregar_cancion(catalogo, generos_set):
    print("üîß Aqu√≠ se agregar√≠a una nueva canci√≥n al cat√°logo.")
    # TODO: Pedir t√≠tulo, artista, g√©nero, duraci√≥n
    # TODO: Crear un diccionario que contenga adem√°s de los datos anteriores:
    #       likes: 0, dislikes: 0, reproducciones: 0
    # TODO: Agregar canci√≥n al cat√°logo
    # TODO: Agregar el g√©nero al set generos_set
#comentario
#  Buscar canciones por t√≠tulo o artista
def buscar_cancion(catalogo):
    print("üîß Aqu√≠ se buscar√≠an canciones por t√≠tulo o artista.")
    # TODO: Pedir texto de b√∫squeda e imprimir coincidencias

#  Filtrar canciones por g√©nero
def filtrar_genero(catalogo, generos_set):
    print("üîß Aqu√≠ se filtrar√≠a el cat√°logo por g√©nero musical.")
    # TODO: Mostrar todos los g√©neros √∫nicos y pedir uno
    # TODO: Mostrar solo las canciones que tengan ese g√©nero

#  Crear una nueva playlist
def crear_playlist(playlists, catalogo):
    print("üîß Aqu√≠ se crear√≠a una nueva playlist.")
    # TODO: Pedir nombre de la playlist
    # TODO: Permitir agregar canciones por su t√≠tulo o ID
    # TODO: Validar que existan y agregarlas a la playlist

#  Reproducir canci√≥n (simular reproducci√≥n)
def reproducir_cancion(catalogo, historial):
    print("üîß Aqu√≠ se simular√≠a la reproducci√≥n de una canci√≥n.")
    # TODO: Pedir t√≠tulo de canci√≥n
    # TODO: Simular la reproducci√≥n con time.sleep(2)
    # TODO: Sumar +1 a 'reproducciones' y agregar al historial del usuario

#  Ver el top 3 de canciones m√°s reproducidas
def ver_top_3(catalogo):
    print("üîß Aqu√≠ se mostrar√≠an las canciones m√°s escuchadas.")
    # TODO: Ordenar por 'reproducciones' y mostrar las 3 m√°s altas

#  Dar like/dislike a una canci√≥n
def reaccionar_cancion(catalogo):
    print("üîß Aqu√≠ se agregar√≠a un like o dislike a una canci√≥n.")
    # TODO: Pedir t√≠tulo de la canci√≥n
    # TODO: Preguntar si es like o dislike y sumar +1 al campo correspondiente

#  Editar una canci√≥n del cat√°logo
def editar_cancion(catalogo):
    print("üîß Aqu√≠ se editar√≠a la informaci√≥n de una canci√≥n.")
    # TODO: Buscar canci√≥n por t√≠tulo
    # TODO: Mostrar sus datos actuales
    # TODO: Pedir al usuario los nuevos datos (o mantener los actuales)
    # TODO: Actualizar el diccionario de esa canci√≥n

#  Eliminar una canci√≥n del cat√°logo
def eliminar_cancion(catalogo):
    print("üîß Aqu√≠ se eliminar√≠a una canci√≥n del cat√°logo.")
    # TODO: Pedir t√≠tulo de canci√≥n
    # TODO: Confirmar y eliminar de la lista

#  Iniciar sesi√≥n como usuario
def iniciar_sesion(usuarios):
    print("üîê Iniciar sesi√≥n de usuario.")
    # TODO: Pedir nombre de usuario
    # TODO: Si no existe, crearlo con campos 'historial' y 'playlists'
    # TODO: Retornar el nombre de usuario actual

#  Mostrar historial del usuario
def mostrar_historial(historial, catalogo):
    print("üßæ Historial de canciones reproducidas.")
    # TODO: Recorrer lista de t√≠tulos y mostrar detalles de cada canci√≥n

# Men√∫ principal
def menu():
    datos = cargar_datos()
    catalogo = datos["catalogo"]
    playlists = datos["playlists"]
    usuarios = datos["usuarios"]
    generos_set = set([c["genero"] for c in catalogo])

    # Iniciar sesi√≥n del usuario
    usuario = iniciar_sesion(usuarios)
    historial = usuarios[usuario]["historial"]
    user_playlists = usuarios[usuario]["playlists"]

    while True:
        print("\nüéº PyMusic ‚Äì Proyecto Final en Consola üéµ")
        print("1. Agregar canci√≥n")
        print("2. Buscar canci√≥n")
        print("3. Filtrar por g√©nero")
        print("4. Crear playlist")
        print("5. Reproducir canci√≥n")
        print("6. Ver top 3 canciones m√°s escuchadas")
        print("7. Like / Dislike canci√≥n")
        print("8. Editar canci√≥n")
        print("9. Eliminar canci√≥n")
        print("10. Ver historial")
        print("11. Guardar y salir")

        opcion = input("Seleccione una opci√≥n: ").strip()

        if opcion == "1":
            agregar_cancion(catalogo, generos_set)
        elif opcion == "2":
            buscar_cancion(catalogo)
        elif opcion == "3":
            filtrar_genero(catalogo, generos_set)
        elif opcion == "4":
            crear_playlist(user_playlists, catalogo)
        elif opcion == "5":
            reproducir_cancion(catalogo, historial)
        elif opcion == "6":
            ver_top_3(catalogo)
        elif opcion == "7":
            reaccionar_cancion(catalogo)
        elif opcion == "8":
            editar_cancion(catalogo)
        elif opcion == "9":
            eliminar_cancion(catalogo)
        elif opcion == "10":
            mostrar_historial(historial, catalogo)
        elif opcion == "11":
            guardar_datos({
                "catalogo": catalogo,
                "playlists": playlists,
                "usuarios": usuarios
            })
            print("üíæ Cambios guardados. ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

# Ejecutar el programa
menu()
